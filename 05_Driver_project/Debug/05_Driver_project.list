
05_Driver_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000954  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b18  08000b20  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b18  08000b18  00001b20  2**0
                  CONTENTS
  4 .ARM          00000000  08000b18  08000b18  00001b20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b18  08000b20  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b18  08000b18  00001b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000b20  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000b20  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ed  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000039f  00000000  00000000  0000303d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  000033e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000105  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000192b  00000000  00000000  0000364d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001082  00000000  00000000  00004f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006d33  00000000  00000000  00005ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000cd2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f8  00000000  00000000  0000cd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0000d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b00 	.word	0x08000b00

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000b00 	.word	0x08000b00

08000204 <main>:
void GPIOxInit(void);

uint8_t interrupt_flag=0;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    GPIOxInit();
 8000208:	f000 f81c 	bl	8000244 <GPIOxInit>
    //GPIO_Write_To_Output_Pin(GPIOA, GPIO_PIN_5, ENABLE);
    while (1)
    {
        if (interrupt_flag == 1)
 800020c:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <main+0x20>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d1fb      	bne.n	800020c <main+0x8>
        {
            void Delay (void);
            interrupt_flag = 0;
 8000214:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <main+0x20>)
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
            GPIO_Toggle_Output_Pin(GPIOA, GPIO_PIN_5);
 800021a:	2105      	movs	r1, #5
 800021c:	4802      	ldr	r0, [pc, #8]	@ (8000228 <main+0x24>)
 800021e:	f000 fb79 	bl	8000914 <GPIO_Toggle_Output_Pin>
        if (interrupt_flag == 1)
 8000222:	e7f3      	b.n	800020c <main+0x8>
 8000224:	2000001c 	.word	0x2000001c
 8000228:	40020000 	.word	0x40020000

0800022c <EXTI15_10_IRQHandler>:
    }

}

void EXTI15_10_IRQHandler (void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
    //*EXTI_PR |= (1 << 13);
    //interrupt_flag =1;
    GPIO_IRQHandling(GPIO_PIN_13);
 8000230:	200d      	movs	r0, #13
 8000232:	f000 fc25 	bl	8000a80 <GPIO_IRQHandling>
    interrupt_flag = 1;
 8000236:	4b02      	ldr	r3, [pc, #8]	@ (8000240 <EXTI15_10_IRQHandler+0x14>)
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	2000001c 	.word	0x2000001c

08000244 <GPIOxInit>:
    uint32_t del_time;
    for (del_time=0; del_time<7000; del_time++);
}

void GPIOxInit(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
    GPIO_Peripheral_Clock_Control(GPIOA, ENABLE);
 800024a:	2101      	movs	r1, #1
 800024c:	4815      	ldr	r0, [pc, #84]	@ (80002a4 <GPIOxInit+0x60>)
 800024e:	f000 f8af 	bl	80003b0 <GPIO_Peripheral_Clock_Control>

    GPIO_Handle_t GPIOs_PORTA;
    GPIO_Handle_t GPIOs_PORTC;

    GPIOs_PORTA.GPIO_x = GPIOA;
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <GPIOxInit+0x60>)
 8000254:	60fb      	str	r3, [r7, #12]
    GPIOs_PORTA.GPIO_Config.GPIO_PinNumber = GPIO_PIN_5;
 8000256:	2305      	movs	r3, #5
 8000258:	743b      	strb	r3, [r7, #16]
    GPIOs_PORTA.GPIO_Config.GPIO_PinMode = General_Purpose_Output;
 800025a:	2301      	movs	r3, #1
 800025c:	747b      	strb	r3, [r7, #17]
    GPIOs_PORTA.GPIO_Config.GPIO_PinSpeed = LowSpeed;
 800025e:	2300      	movs	r3, #0
 8000260:	74fb      	strb	r3, [r7, #19]
    GPIOs_PORTA.GPIO_Config.GPIO_PinPUPDR = No_pullup_No_pulldown;
 8000262:	2300      	movs	r3, #0
 8000264:	753b      	strb	r3, [r7, #20]
    GPIOs_PORTA.GPIO_Config.GPIO_PinOutput_Type = Push_Pull;
 8000266:	2300      	movs	r3, #0
 8000268:	74bb      	strb	r3, [r7, #18]
    GPIOs_PORTA.GPIO_Config.GPIO_PinAFR = AF0;
 800026a:	2300      	movs	r3, #0
 800026c:	757b      	strb	r3, [r7, #21]

    GPIO_Init(&GPIOs_PORTA);
 800026e:	f107 030c 	add.w	r3, r7, #12
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f9ba 	bl	80005ec <GPIO_Init>


    GPIOs_PORTC.GPIO_x = GPIOC;
 8000278:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <GPIOxInit+0x64>)
 800027a:	603b      	str	r3, [r7, #0]
    GPIOs_PORTC.GPIO_Config.GPIO_PinNumber = GPIO_PIN_13;
 800027c:	230d      	movs	r3, #13
 800027e:	713b      	strb	r3, [r7, #4]
    GPIOs_PORTC.GPIO_Config.GPIO_PinMode = Input_Interrupt_Falling;
 8000280:	2305      	movs	r3, #5
 8000282:	717b      	strb	r3, [r7, #5]
    GPIOs_PORTC.GPIO_Config.GPIO_PinSpeed = LowSpeed;
 8000284:	2300      	movs	r3, #0
 8000286:	71fb      	strb	r3, [r7, #7]
    GPIOs_PORTC.GPIO_Config.GPIO_PinPUPDR = No_pullup_No_pulldown;
 8000288:	2300      	movs	r3, #0
 800028a:	723b      	strb	r3, [r7, #8]

    GPIO_Init(&GPIOs_PORTC);
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f9ac 	bl	80005ec <GPIO_Init>

    GPIO_IRQInterruptConfig(EXTI15_10_IRQn, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	2028      	movs	r0, #40	@ 0x28
 8000298:	f000 fb52 	bl	8000940 <GPIO_IRQInterruptConfig>

}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40020000 	.word	0x40020000
 80002a8:	40020800 	.word	0x40020800

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	@ (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	@ (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	@ (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 fbed 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff91 	bl	8000204 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000b20 	.word	0x08000b20
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	20000020 	.word	0x20000020

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <gpio_to_port_number>:


/**************************** General Macro Definitions ********************************/

static inline uint8_t gpio_to_port_number (GPIO_Register_Definition_Type * GPIOx)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    uint8_t  retValue = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]

    if(GPIOx == GPIOA) retValue = 0;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a20      	ldr	r2, [pc, #128]	@ (8000390 <gpio_to_port_number+0x90>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d102      	bne.n	800031a <gpio_to_port_number+0x1a>
 8000314:	2300      	movs	r3, #0
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	e032      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOB) retValue = 1;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <gpio_to_port_number+0x94>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d102      	bne.n	8000328 <gpio_to_port_number+0x28>
 8000322:	2301      	movs	r3, #1
 8000324:	73fb      	strb	r3, [r7, #15]
 8000326:	e02b      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOC) retValue = 2;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <gpio_to_port_number+0x98>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d102      	bne.n	8000336 <gpio_to_port_number+0x36>
 8000330:	2302      	movs	r3, #2
 8000332:	73fb      	strb	r3, [r7, #15]
 8000334:	e024      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOD) retValue = 3;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a18      	ldr	r2, [pc, #96]	@ (800039c <gpio_to_port_number+0x9c>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d102      	bne.n	8000344 <gpio_to_port_number+0x44>
 800033e:	2303      	movs	r3, #3
 8000340:	73fb      	strb	r3, [r7, #15]
 8000342:	e01d      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOE) retValue = 4;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a16      	ldr	r2, [pc, #88]	@ (80003a0 <gpio_to_port_number+0xa0>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d102      	bne.n	8000352 <gpio_to_port_number+0x52>
 800034c:	2304      	movs	r3, #4
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e016      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOF) retValue = 5;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a13      	ldr	r2, [pc, #76]	@ (80003a4 <gpio_to_port_number+0xa4>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d102      	bne.n	8000360 <gpio_to_port_number+0x60>
 800035a:	2305      	movs	r3, #5
 800035c:	73fb      	strb	r3, [r7, #15]
 800035e:	e00f      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOG) retValue = 6;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a11      	ldr	r2, [pc, #68]	@ (80003a8 <gpio_to_port_number+0xa8>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d102      	bne.n	800036e <gpio_to_port_number+0x6e>
 8000368:	2306      	movs	r3, #6
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	e008      	b.n	8000380 <gpio_to_port_number+0x80>
    else if (GPIOx == GPIOH) retValue = 7;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <gpio_to_port_number+0xac>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d102      	bne.n	800037c <gpio_to_port_number+0x7c>
 8000376:	2307      	movs	r3, #7
 8000378:	73fb      	strb	r3, [r7, #15]
 800037a:	e001      	b.n	8000380 <gpio_to_port_number+0x80>
    else  retValue = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]

    return retValue;
 8000380:	7bfb      	ldrb	r3, [r7, #15]
}
 8000382:	4618      	mov	r0, r3
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40020400 	.word	0x40020400
 8000398:	40020800 	.word	0x40020800
 800039c:	40020c00 	.word	0x40020c00
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40021400 	.word	0x40021400
 80003a8:	40021800 	.word	0x40021800
 80003ac:	40021c00 	.word	0x40021c00

080003b0 <GPIO_Peripheral_Clock_Control>:

/**
 * @brief   -This function enables or disable peripheral clocks
 */
void GPIO_Peripheral_Clock_Control( GPIO_Register_Definition_Type *GPIOx, uint8_t status)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
    if (status == ENABLE)
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d157      	bne.n	8000472 <GPIO_Peripheral_Clock_Control+0xc2>
    {
        if(GPIOx == GPIOA)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a59      	ldr	r2, [pc, #356]	@ (800052c <GPIO_Peripheral_Clock_Control+0x17c>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_Peripheral_Clock_Control+0x28>
        {
            RCC_AHB1ENR_GPIOA_SET;
 80003ca:	4b59      	ldr	r3, [pc, #356]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a58      	ldr	r2, [pc, #352]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
        else if(GPIOx == GPIOH)
        {
            RCC_AHB1ENR_GPIOH_CLR;
        }
    }
}
 80003d6:	e0a3      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOB)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a56      	ldr	r2, [pc, #344]	@ (8000534 <GPIO_Peripheral_Clock_Control+0x184>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_Peripheral_Clock_Control+0x3e>
            RCC_AHB1ENR_GPIOB_SET;
 80003e0:	4b53      	ldr	r3, [pc, #332]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a52      	ldr	r2, [pc, #328]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	e098      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOC)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a51      	ldr	r2, [pc, #324]	@ (8000538 <GPIO_Peripheral_Clock_Control+0x188>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_Peripheral_Clock_Control+0x54>
            RCC_AHB1ENR_GPIOC_SET;
 80003f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000402:	e08d      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOD)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a4d      	ldr	r2, [pc, #308]	@ (800053c <GPIO_Peripheral_Clock_Control+0x18c>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_Peripheral_Clock_Control+0x6a>
            RCC_AHB1ENR_GPIOD_SET;
 800040c:	4b48      	ldr	r3, [pc, #288]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a47      	ldr	r2, [pc, #284]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000418:	e082      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOE)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a48      	ldr	r2, [pc, #288]	@ (8000540 <GPIO_Peripheral_Clock_Control+0x190>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_Peripheral_Clock_Control+0x80>
            RCC_AHB1ENR_GPIOE_SET;
 8000422:	4b43      	ldr	r3, [pc, #268]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a42      	ldr	r2, [pc, #264]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042e:	e077      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOF)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a44      	ldr	r2, [pc, #272]	@ (8000544 <GPIO_Peripheral_Clock_Control+0x194>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_Peripheral_Clock_Control+0x96>
            RCC_AHB1ENR_GPIOF_SET;
 8000438:	4b3d      	ldr	r3, [pc, #244]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a3c      	ldr	r2, [pc, #240]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000444:	e06c      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOG)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a3f      	ldr	r2, [pc, #252]	@ (8000548 <GPIO_Peripheral_Clock_Control+0x198>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_Peripheral_Clock_Control+0xac>
            RCC_AHB1ENR_GPIOG_SET;
 800044e:	4b38      	ldr	r3, [pc, #224]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000452:	4a37      	ldr	r2, [pc, #220]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000458:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045a:	e061      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOH)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a3b      	ldr	r2, [pc, #236]	@ (800054c <GPIO_Peripheral_Clock_Control+0x19c>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d15d      	bne.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
            RCC_AHB1ENR_GPIOH_SET;
 8000464:	4b32      	ldr	r3, [pc, #200]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a31      	ldr	r2, [pc, #196]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 800046a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	e056      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        if(GPIOx == GPIOA)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a2d      	ldr	r2, [pc, #180]	@ (800052c <GPIO_Peripheral_Clock_Control+0x17c>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_Peripheral_Clock_Control+0xd8>
            RCC_AHB1ENR_GPIOA_CLR;
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e04b      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOB)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a2a      	ldr	r2, [pc, #168]	@ (8000534 <GPIO_Peripheral_Clock_Control+0x184>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_Peripheral_Clock_Control+0xee>
            RCC_AHB1ENR_GPIOB_CLR;
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000496:	f043 0302 	orr.w	r3, r3, #2
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049c:	e040      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOC)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a25      	ldr	r2, [pc, #148]	@ (8000538 <GPIO_Peripheral_Clock_Control+0x188>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_Peripheral_Clock_Control+0x104>
            RCC_AHB1ENR_GPIOC_CLR;
 80004a6:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	4a21      	ldr	r2, [pc, #132]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b2:	e035      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOD)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a21      	ldr	r2, [pc, #132]	@ (800053c <GPIO_Peripheral_Clock_Control+0x18c>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_Peripheral_Clock_Control+0x11a>
            RCC_AHB1ENR_GPIOD_CLR;
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c8:	e02a      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOE)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000540 <GPIO_Peripheral_Clock_Control+0x190>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_Peripheral_Clock_Control+0x130>
            RCC_AHB1ENR_GPIOE_CLR;
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a16      	ldr	r2, [pc, #88]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004de:	e01f      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOF)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a18      	ldr	r2, [pc, #96]	@ (8000544 <GPIO_Peripheral_Clock_Control+0x194>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_Peripheral_Clock_Control+0x146>
            RCC_AHB1ENR_GPIOF_CLR;
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	e014      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOG)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a13      	ldr	r2, [pc, #76]	@ (8000548 <GPIO_Peripheral_Clock_Control+0x198>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_Peripheral_Clock_Control+0x15c>
            RCC_AHB1ENR_GPIOG_CLR;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050a:	e009      	b.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
        else if(GPIOx == GPIOH)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a0f      	ldr	r2, [pc, #60]	@ (800054c <GPIO_Peripheral_Clock_Control+0x19c>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d105      	bne.n	8000520 <GPIO_Peripheral_Clock_Control+0x170>
            RCC_AHB1ENR_GPIOH_CLR;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <GPIO_Peripheral_Clock_Control+0x180>)
 800051a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40020000 	.word	0x40020000
 8000530:	40023800 	.word	0x40023800
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021400 	.word	0x40021400
 8000548:	40021800 	.word	0x40021800
 800054c:	40021c00 	.word	0x40021c00

08000550 <set_alternate_funtion>:

void set_alternate_funtion(GPIO_Handle_t *GPIOx_Handle, uint8_t register_selector, uint8_t position_in_register)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	4613      	mov	r3, r2
 800055e:	70bb      	strb	r3, [r7, #2]
    if(register_selector == 1)
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d11e      	bne.n	80005a4 <set_alternate_funtion+0x54>
    {

        //Clean the register before set
        GPIOx_Handle->GPIO_x->GPIOx_AFRH &= ~((0xF) << (4*position_in_register));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800056c:	78bb      	ldrb	r3, [r7, #2]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	210f      	movs	r1, #15
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	400a      	ands	r2, r1
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
        GPIOx_Handle->GPIO_x->GPIOx_AFRH &= ~((GPIOx_Handle->GPIO_Config.GPIO_PinAFR) << (4*position_in_register));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7a5b      	ldrb	r3, [r3, #9]
 800058c:	4619      	mov	r1, r3
 800058e:	78bb      	ldrb	r3, [r7, #2]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	625a      	str	r2, [r3, #36]	@ 0x24
    {
        //Clean the register before set
        GPIOx_Handle->GPIO_x->GPIOx_AFRL &= ~((0xF) << (4*position_in_register));
        GPIOx_Handle->GPIO_x->GPIOx_AFRL &= ~((GPIOx_Handle->GPIO_Config.GPIO_PinAFR) << (4*position_in_register));
    }
}
 80005a2:	e01d      	b.n	80005e0 <set_alternate_funtion+0x90>
        GPIOx_Handle->GPIO_x->GPIOx_AFRL &= ~((0xF) << (4*position_in_register));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6a1a      	ldr	r2, [r3, #32]
 80005aa:	78bb      	ldrb	r3, [r7, #2]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	210f      	movs	r1, #15
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	400a      	ands	r2, r1
 80005be:	621a      	str	r2, [r3, #32]
        GPIOx_Handle->GPIO_x->GPIOx_AFRL &= ~((GPIOx_Handle->GPIO_Config.GPIO_PinAFR) << (4*position_in_register));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a1a      	ldr	r2, [r3, #32]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7a5b      	ldrb	r3, [r3, #9]
 80005ca:	4619      	mov	r1, r3
 80005cc:	78bb      	ldrb	r3, [r7, #2]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	400a      	ands	r2, r1
 80005de:	621a      	str	r2, [r3, #32]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *GPIOx_Handle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    //Configure the Mode for the pin
    if(GPIOx_Handle->GPIO_Config.GPIO_PinMode <= Analog_Mode)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	795b      	ldrb	r3, [r3, #5]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d822      	bhi.n	8000642 <GPIO_Init+0x56>
        if (GPIOx_Handle->GPIO_Config.GPIO_PinMode == Input)
        {

        }

        uint32_t mode_config = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
        mode_config = (GPIOx_Handle->GPIO_Config.GPIO_PinMode << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	61fb      	str	r3, [r7, #28]
        //clean the register
        GPIOx_Handle->GPIO_x->GPIOx_MODER &= ~(0x3 << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	2103      	movs	r1, #3
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	400a      	ands	r2, r1
 800062e:	601a      	str	r2, [r3, #0]
        //Assign the register to the calculated value;
        GPIOx_Handle->GPIO_x->GPIOx_MODER |= mode_config;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	69fa      	ldr	r2, [r7, #28]
 800063c:	430a      	orrs	r2, r1
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	e0d4      	b.n	80007ec <GPIO_Init+0x200>
    }
    else
    {
        RCC_APB2ENR_SYSCFG_SET;
 8000642:	4b39      	ldr	r3, [pc, #228]	@ (8000728 <GPIO_Init+0x13c>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000646:	4a38      	ldr	r2, [pc, #224]	@ (8000728 <GPIO_Init+0x13c>)
 8000648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800064c:	6453      	str	r3, [r2, #68]	@ 0x44
        uint32_t mode_config = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
        //Pin Mode is an input Interrupt
        if (GPIOx_Handle->GPIO_Config.GPIO_PinMode == Input_Interrupt_Falling)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d130      	bne.n	80006bc <GPIO_Init+0xd0>
        {
            mode_config = (Input << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
            GPIOx_Handle->GPIO_x->GPIOx_MODER &= ~(0x03 << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	2103      	movs	r1, #3
 800066c:	fa01 f303 	lsl.w	r3, r1, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	400a      	ands	r2, r1
 800067a:	601a      	str	r2, [r3, #0]
            GPIOx_Handle->GPIO_x->GPIOx_MODER |= mode_config;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6819      	ldr	r1, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000688:	430a      	orrs	r2, r1
 800068a:	601a      	str	r2, [r3, #0]
            EXTI->EXTI_FTSR |= (1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 800068c:	4b27      	ldr	r3, [pc, #156]	@ (800072c <GPIO_Init+0x140>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	4611      	mov	r1, r2
 8000696:	2201      	movs	r2, #1
 8000698:	408a      	lsls	r2, r1
 800069a:	4611      	mov	r1, r2
 800069c:	4a23      	ldr	r2, [pc, #140]	@ (800072c <GPIO_Init+0x140>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	60d3      	str	r3, [r2, #12]
            //Clear rising trigger ensuring Falling TRigger is the only set
            EXTI->EXTI_RTSR &= ~(1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <GPIO_Init+0x140>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	7912      	ldrb	r2, [r2, #4]
 80006aa:	4611      	mov	r1, r2
 80006ac:	2201      	movs	r2, #1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a1d      	ldr	r2, [pc, #116]	@ (800072c <GPIO_Init+0x140>)
 80006b6:	400b      	ands	r3, r1
 80006b8:	6093      	str	r3, [r2, #8]
 80006ba:	e06c      	b.n	8000796 <GPIO_Init+0x1aa>
        }
        else if (GPIOx_Handle->GPIO_Config.GPIO_PinMode == Input_Interrupt_Rising)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d135      	bne.n	8000730 <GPIO_Init+0x144>
        {
            mode_config = (Input << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
            GPIOx_Handle->GPIO_x->GPIOx_MODER &= ~(0x03 << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	400a      	ands	r2, r1
 80006e4:	601a      	str	r2, [r3, #0]
            GPIOx_Handle->GPIO_x->GPIOx_MODER |= mode_config;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f2:	430a      	orrs	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
            EXTI->EXTI_RTSR |= (1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <GPIO_Init+0x140>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a09      	ldr	r2, [pc, #36]	@ (800072c <GPIO_Init+0x140>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6093      	str	r3, [r2, #8]
            //Clear falling trigger ensuring Falling TRigger is the only set
            EXTI->EXTI_FTSR &= ~(1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <GPIO_Init+0x140>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	7912      	ldrb	r2, [r2, #4]
 8000714:	4611      	mov	r1, r2
 8000716:	2201      	movs	r2, #1
 8000718:	408a      	lsls	r2, r1
 800071a:	43d2      	mvns	r2, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a03      	ldr	r2, [pc, #12]	@ (800072c <GPIO_Init+0x140>)
 8000720:	400b      	ands	r3, r1
 8000722:	60d3      	str	r3, [r2, #12]
 8000724:	e037      	b.n	8000796 <GPIO_Init+0x1aa>
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40013c00 	.word	0x40013c00
        }
        else if (GPIOx_Handle->GPIO_Config.GPIO_PinMode == Input_Interrupt_Rising_Falling)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b06      	cmp	r3, #6
 8000736:	d12e      	bne.n	8000796 <GPIO_Init+0x1aa>
        {
            mode_config = (Input << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
            GPIOx_Handle->GPIO_x->GPIOx_MODER &= ~(0x03 << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2103      	movs	r1, #3
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	400a      	ands	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
            GPIOx_Handle->GPIO_x->GPIOx_MODER |= mode_config;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000766:	430a      	orrs	r2, r1
 8000768:	601a      	str	r2, [r3, #0]
            EXTI->EXTI_RTSR |= (1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 800076a:	4b68      	ldr	r3, [pc, #416]	@ (800090c <GPIO_Init+0x320>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	7912      	ldrb	r2, [r2, #4]
 8000772:	4611      	mov	r1, r2
 8000774:	2201      	movs	r2, #1
 8000776:	408a      	lsls	r2, r1
 8000778:	4611      	mov	r1, r2
 800077a:	4a64      	ldr	r2, [pc, #400]	@ (800090c <GPIO_Init+0x320>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6093      	str	r3, [r2, #8]
            EXTI->EXTI_FTSR |= (1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 8000780:	4b62      	ldr	r3, [pc, #392]	@ (800090c <GPIO_Init+0x320>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7912      	ldrb	r2, [r2, #4]
 8000788:	4611      	mov	r1, r2
 800078a:	2201      	movs	r2, #1
 800078c:	408a      	lsls	r2, r1
 800078e:	4611      	mov	r1, r2
 8000790:	4a5e      	ldr	r2, [pc, #376]	@ (800090c <GPIO_Init+0x320>)
 8000792:	430b      	orrs	r3, r1
 8000794:	60d3      	str	r3, [r2, #12]

        uint8_t register_to_write; //SYSCFG_EXTICR1,2,3,4
        uint8_t offset; // EXTI 0 - 15  position 0-4

        //Calculate the register to write
        register_to_write = GPIOx_Handle->GPIO_Config.GPIO_PinNumber/4;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        offset = GPIOx_Handle->GPIO_Config.GPIO_PinNumber % 4;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	f003 0303 	and.w	r3, r3, #3
 80007a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


        uint8_t configuration = gpio_to_port_number(GPIOx_Handle->GPIO_x);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fda5 	bl	8000300 <gpio_to_port_number>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        SYSCFG->SYSCFG_EXTICRx[register_to_write] = ( configuration << (offset * 4) ); // 4 since it is the register selection
 80007bc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80007c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	fa02 f103 	lsl.w	r1, r2, r3
 80007ca:	4a51      	ldr	r2, [pc, #324]	@ (8000910 <GPIO_Init+0x324>)
 80007cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80007d0:	3302      	adds	r3, #2
 80007d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        EXTI->EXTI_IMR |= ( 1 << GPIOx_Handle->GPIO_Config.GPIO_PinNumber);
 80007d6:	4b4d      	ldr	r3, [pc, #308]	@ (800090c <GPIO_Init+0x320>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	7912      	ldrb	r2, [r2, #4]
 80007de:	4611      	mov	r1, r2
 80007e0:	2201      	movs	r2, #1
 80007e2:	408a      	lsls	r2, r1
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a49      	ldr	r2, [pc, #292]	@ (800090c <GPIO_Init+0x320>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
    }

    //Configure the speed for the pin
    if(GPIOx_Handle->GPIO_Config.GPIO_PinSpeed <= HighSpeed)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	79db      	ldrb	r3, [r3, #7]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d821      	bhi.n	8000838 <GPIO_Init+0x24c>
    {
        uint32_t speed_config = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
        speed_config = (GPIOx_Handle->GPIO_Config.GPIO_PinSpeed << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	79db      	ldrb	r3, [r3, #7]
 80007fc:	461a      	mov	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	61bb      	str	r3, [r7, #24]
        //clean the register
        GPIOx_Handle->GPIO_x->GPIOx_OSPEEDR &= ~(0x3 << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2103      	movs	r1, #3
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	400a      	ands	r2, r1
 8000826:	609a      	str	r2, [r3, #8]
        //Assign the register to the calculated value;
        GPIOx_Handle->GPIO_x->GPIOx_OSPEEDR |= speed_config;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6899      	ldr	r1, [r3, #8]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	430a      	orrs	r2, r1
 8000836:	609a      	str	r2, [r3, #8]
    else
    {
        //interrupt
    }
    //Configure PUPDR of GPIO pin
    if(GPIOx_Handle->GPIO_Config.GPIO_PinPUPDR < reserved_PUPDR)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7a1b      	ldrb	r3, [r3, #8]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d821      	bhi.n	8000884 <GPIO_Init+0x298>
    {
        uint32_t pupdr_config = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
        pupdr_config = (GPIOx_Handle->GPIO_Config.GPIO_PinPUPDR << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a1b      	ldrb	r3, [r3, #8]
 8000848:	461a      	mov	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
        //clean the register
        GPIOx_Handle->GPIO_x->GPIOx_PUPDR &= ~(0x3 << (2 * GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2103      	movs	r1, #3
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	4619      	mov	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	400a      	ands	r2, r1
 8000872:	60da      	str	r2, [r3, #12]
        //Assign the register to the calculated value;
        GPIOx_Handle->GPIO_x->GPIOx_PUPDR |= pupdr_config;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68d9      	ldr	r1, [r3, #12]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	430a      	orrs	r2, r1
 8000882:	60da      	str	r2, [r3, #12]
    else
    {
        //interrupt
    }
    //Configure Output type of GPIO pin
    if(GPIOx_Handle->GPIO_Config.GPIO_PinOutput_Type <= Open_Drain)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	799b      	ldrb	r3, [r3, #6]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d81f      	bhi.n	80008cc <GPIO_Init+0x2e0>
    {
        uint32_t output_type_config = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
        output_type_config = (GPIOx_Handle->GPIO_Config.GPIO_PinOutput_Type << (GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	799b      	ldrb	r3, [r3, #6]
 8000894:	461a      	mov	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	613b      	str	r3, [r7, #16]
        //clean the register
        GPIOx_Handle->GPIO_x->GPIOx_OTYPER &= ~(0x1 << (GPIOx_Handle->GPIO_Config.GPIO_PinNumber));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2301      	movs	r3, #1
 80008ae:	408b      	lsls	r3, r1
 80008b0:	43db      	mvns	r3, r3
 80008b2:	4619      	mov	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	400a      	ands	r2, r1
 80008ba:	605a      	str	r2, [r3, #4]
        //Assign the register to the calculated value;
        GPIOx_Handle->GPIO_x->GPIOx_OTYPER |= output_type_config;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6859      	ldr	r1, [r3, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	605a      	str	r2, [r3, #4]
    else
    {
        //interrupt
    }
    //Configure Alternate Function of GPIO pin
    if(GPIOx_Handle->GPIO_Config.GPIO_PinMode == Alternate_Function)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d116      	bne.n	8000902 <GPIO_Init+0x316>
    {
        if(GPIOx_Handle->GPIO_Config.GPIO_PinAFR <= AF15)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7a5b      	ldrb	r3, [r3, #9]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d812      	bhi.n	8000902 <GPIO_Init+0x316>
        {
            uint8_t register_selector= 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
            uint8_t position_in_register= 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73bb      	strb	r3, [r7, #14]

           register_selector = GPIOx_Handle->GPIO_Config.GPIO_PinNumber / 8;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	08db      	lsrs	r3, r3, #3
 80008ea:	73fb      	strb	r3, [r7, #15]
           position_in_register = GPIOx_Handle->GPIO_Config.GPIO_PinNumber % 8;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	73bb      	strb	r3, [r7, #14]

           set_alternate_funtion(GPIOx_Handle, register_selector, position_in_register);
 80008f6:	7bba      	ldrb	r2, [r7, #14]
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fe27 	bl	8000550 <set_alternate_funtion>
        else
        {
            //interrupt
        }
    }
}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	@ 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40013c00 	.word	0x40013c00
 8000910:	40013800 	.word	0x40013800

08000914 <GPIO_Toggle_Output_Pin>:
void GPIO_Write_To_Output_Port(GPIO_Register_Definition_Type *GPIOx, uint16_t data)
{
    GPIOx->GPIOx_ODR |= data;
}

void GPIO_Toggle_Output_Pin(GPIO_Register_Definition_Type *GPIOx, GPIO_Pin Pin_Number){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
    GPIOx->GPIOx_ODR ^= (1 << Pin_Number);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	78fa      	ldrb	r2, [r7, #3]
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	405a      	eors	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	615a      	str	r2, [r3, #20]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <GPIO_IRQInterruptConfig>:


void GPIO_IRQInterruptConfig(IRQn_Type IRQ_Number, uint8_t Selection)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	460a      	mov	r2, r1
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	4613      	mov	r3, r2
 800094e:	71bb      	strb	r3, [r7, #6]
    if(Selection == ENABLE)
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d145      	bne.n	80009e2 <GPIO_IRQInterruptConfig+0xa2>
    {
        if (IRQ_Number <= 31)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b1f      	cmp	r3, #31
 800095c:	dc0b      	bgt.n	8000976 <GPIO_IRQInterruptConfig+0x36>
        {
            *NVIC_ISER0 |= (1 << IRQ_Number);
 800095e:	4b42      	ldr	r3, [pc, #264]	@ (8000a68 <GPIO_IRQInterruptConfig+0x128>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a68 <GPIO_IRQInterruptConfig+0x128>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6013      	str	r3, [r2, #0]
        else if (IRQ_Number > 63 && IRQ_Number <= 63)
        {
            *NVIC_ICER2 = (1 << (IRQ_Number  % 32));
        }
    }
}
 8000974:	e072      	b.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
        }else if (IRQ_Number > 31 && IRQ_Number <= 63)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b1f      	cmp	r3, #31
 800097c:	dd16      	ble.n	80009ac <GPIO_IRQInterruptConfig+0x6c>
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b3f      	cmp	r3, #63	@ 0x3f
 8000984:	dc12      	bgt.n	80009ac <GPIO_IRQInterruptConfig+0x6c>
            *NVIC_ISER1 |= (1 << (IRQ_Number % 32));
 8000986:	4b39      	ldr	r3, [pc, #228]	@ (8000a6c <GPIO_IRQInterruptConfig+0x12c>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	4259      	negs	r1, r3
 8000990:	f003 031f 	and.w	r3, r3, #31
 8000994:	f001 011f 	and.w	r1, r1, #31
 8000998:	bf58      	it	pl
 800099a:	424b      	negpl	r3, r1
 800099c:	b25b      	sxtb	r3, r3
 800099e:	4619      	mov	r1, r3
 80009a0:	2301      	movs	r3, #1
 80009a2:	408b      	lsls	r3, r1
 80009a4:	4931      	ldr	r1, [pc, #196]	@ (8000a6c <GPIO_IRQInterruptConfig+0x12c>)
 80009a6:	4313      	orrs	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]
 80009aa:	e057      	b.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
        else if (IRQ_Number > 63 && IRQ_Number <= 95)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80009b2:	dd53      	ble.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b5f      	cmp	r3, #95	@ 0x5f
 80009ba:	dc4f      	bgt.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
            *NVIC_ISER2 |= (1 << (IRQ_Number % 32));
 80009bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <GPIO_IRQInterruptConfig+0x130>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4259      	negs	r1, r3
 80009c6:	f003 031f 	and.w	r3, r3, #31
 80009ca:	f001 011f 	and.w	r1, r1, #31
 80009ce:	bf58      	it	pl
 80009d0:	424b      	negpl	r3, r1
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	2301      	movs	r3, #1
 80009d8:	408b      	lsls	r3, r1
 80009da:	4925      	ldr	r1, [pc, #148]	@ (8000a70 <GPIO_IRQInterruptConfig+0x130>)
 80009dc:	4313      	orrs	r3, r2
 80009de:	600b      	str	r3, [r1, #0]
}
 80009e0:	e03c      	b.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
        if (IRQ_Number <= 31)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b1f      	cmp	r3, #31
 80009e8:	dc06      	bgt.n	80009f8 <GPIO_IRQInterruptConfig+0xb8>
            *NVIC_ICER0 = (1 << IRQ_Number);
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2201      	movs	r2, #1
 80009f0:	409a      	lsls	r2, r3
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <GPIO_IRQInterruptConfig+0x134>)
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	e031      	b.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
        }else if (IRQ_Number > 31 && IRQ_Number <= 63)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b1f      	cmp	r3, #31
 80009fe:	dd14      	ble.n	8000a2a <GPIO_IRQInterruptConfig+0xea>
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a06:	dc10      	bgt.n	8000a2a <GPIO_IRQInterruptConfig+0xea>
            *NVIC_ICER1 = (1 << (IRQ_Number % 32));
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	425a      	negs	r2, r3
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	f002 021f 	and.w	r2, r2, #31
 8000a16:	bf58      	it	pl
 8000a18:	4253      	negpl	r3, r2
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	2301      	movs	r3, #1
 8000a20:	fa03 f202 	lsl.w	r2, r3, r2
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <GPIO_IRQInterruptConfig+0x138>)
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	e018      	b.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
        else if (IRQ_Number > 63 && IRQ_Number <= 63)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a30:	dd14      	ble.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a38:	dc10      	bgt.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
            *NVIC_ICER2 = (1 << (IRQ_Number  % 32));
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	425a      	negs	r2, r3
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	f002 021f 	and.w	r2, r2, #31
 8000a48:	bf58      	it	pl
 8000a4a:	4253      	negpl	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	fa03 f202 	lsl.w	r2, r3, r2
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <GPIO_IRQInterruptConfig+0x13c>)
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	e7ff      	b.n	8000a5c <GPIO_IRQInterruptConfig+0x11c>
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000e104 	.word	0xe000e104
 8000a70:	e000e108 	.word	0xe000e108
 8000a74:	e000e180 	.word	0xe000e180
 8000a78:	e000e184 	.word	0xe000e184
 8000a7c:	e000e188 	.word	0xe000e188

08000a80 <GPIO_IRQHandling>:
    *(NVIC_IPR_BASE + (iprx)) |= (IRQPriority << shift_value);
}


void GPIO_IRQHandling(GPIO_Pin PinNumber)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
    if(EXTI->EXTI_PR & (1<< PinNumber))
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <GPIO_IRQHandling+0x34>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	79fa      	ldrb	r2, [r7, #7]
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f202 	lsl.w	r2, r1, r2
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <GPIO_IRQHandling+0x26>
    {
        //clear
        EXTI->EXTI_PR = (1<<PinNumber);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <GPIO_IRQHandling+0x34>)
 8000aa4:	615a      	str	r2, [r3, #20]
    }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40013c00 	.word	0x40013c00

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	@ (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	@ (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	@ (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 f818 	bl	8000b00 <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08000b18 	.word	0x08000b18
 8000af4:	08000b18 	.word	0x08000b18
 8000af8:	08000b18 	.word	0x08000b18
 8000afc:	08000b1c 	.word	0x08000b1c

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
