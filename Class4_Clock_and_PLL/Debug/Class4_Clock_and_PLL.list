
Class4_Clock_and_PLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a0  080003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000015f  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000d1  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ff5  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000047c  00000000  00000000  0000268e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003f20  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  00006a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00006b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000384 	.word	0x08000384

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000384 	.word	0x08000384

08000204 <configure_PC9_as_MCO>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void configure_PC9_as_MCO(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
	volatile uint32_t * RCC_AHB1ENR  = (volatile uint32_t*) RCC_AHB1ENR_ADD;
 800020a:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <configure_PC9_as_MCO+0x70>)
 800020c:	617b      	str	r3, [r7, #20]
	volatile uint32_t * RCC_APB2ENR  = (volatile uint32_t *) RCC_APB2ENR_ADD;
 800020e:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <configure_PC9_as_MCO+0x74>)
 8000210:	613b      	str	r3, [r7, #16]
	volatile uint32_t * RCC_CFGR     = (volatile uint32_t *) RCC_CFGR_ADD;
 8000212:	4b1a      	ldr	r3, [pc, #104]	@ (800027c <configure_PC9_as_MCO+0x78>)
 8000214:	60fb      	str	r3, [r7, #12]
	volatile uint32_t * GPIOC_MODER  = (volatile uint32_t *) GPIOC_MODER_ADD;
 8000216:	4b1a      	ldr	r3, [pc, #104]	@ (8000280 <configure_PC9_as_MCO+0x7c>)
 8000218:	60bb      	str	r3, [r7, #8]
	volatile uint32_t * GPIOC_AFRH   = (volatile uint32_t *) GPIOC_AFRH_ADD;
 800021a:	4b1a      	ldr	r3, [pc, #104]	@ (8000284 <configure_PC9_as_MCO+0x80>)
 800021c:	607b      	str	r3, [r7, #4]

	*RCC_AHB1ENR |= (1<<2); //IO port C clock enable
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0204 	orr.w	r2, r3, #4
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1<<14); //SYSCFGEN  System configuration controller clock enable set to 1
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	601a      	str	r2, [r3, #0]
	*RCC_CFGR    &= ~(3<<30); //Clear MCO2 config Enable SYSCLK
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	601a      	str	r2, [r3, #0]


	*GPIOC_MODER &= ~(3 << 18);//clear PC9 mode
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |=  (2 << 18); //PC9 is alternate
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	601a      	str	r2, [r3, #0]
    *GPIOC_AFRH  &= ~(15<<  4); //AF0 (MCO)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]



}
 8000266:	bf00      	nop
 8000268:	371c      	adds	r7, #28
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023830 	.word	0x40023830
 8000278:	40023844 	.word	0x40023844
 800027c:	40023808 	.word	0x40023808
 8000280:	40020800 	.word	0x40020800
 8000284:	40020824 	.word	0x40020824

08000288 <select_HSI_as_SYSCLK>:

void select_HSI_as_SYSCLK(void)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
	volatile uint32_t * RCC_CR  = (volatile uint32_t*) RCC_CR_ADD;
 800028e:	4b0f      	ldr	r3, [pc, #60]	@ (80002cc <select_HSI_as_SYSCLK+0x44>)
 8000290:	607b      	str	r3, [r7, #4]

	volatile uint32_t * RCC_CFGR     = (volatile uint32_t *) RCC_CFGR_ADD;
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <select_HSI_as_SYSCLK+0x48>)
 8000294:	603b      	str	r3, [r7, #0]

	*RCC_CR |= (0x01 << 0); //HSI ON
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f043 0201 	orr.w	r2, r3, #1
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]
	*RCC_CFGR &= ~(0x03<<0); //Clear register and select HSI oscillator selected as system clock
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f023 0203 	bic.w	r2, r3, #3
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	601a      	str	r2, [r3, #0]



	while(((*RCC_CFGR >>2) & 3) != 0)
 80002ae:	bf00      	nop
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	089b      	lsrs	r3, r3, #2
 80002b6:	f003 0303 	and.w	r3, r3, #3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f8      	bne.n	80002b0 <select_HSI_as_SYSCLK+0x28>
	{
	}


}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40023808 	.word	0x40023808

080002d4 <main>:


int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
    configure_PC9_as_MCO();
 80002d8:	f7ff ff94 	bl	8000204 <configure_PC9_as_MCO>
    select_HSI_as_SYSCLK();
 80002dc:	f7ff ffd4 	bl	8000288 <select_HSI_as_SYSCLK>
 80002e0:	2300      	movs	r3, #0
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	@ (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	@ (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	@ (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ffdb 	bl	80002d4 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	2000001c 	.word	0x2000001c

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	@ (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	@ (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	@ (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	@ (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
